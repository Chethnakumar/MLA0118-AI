import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load the Iris dataset
data = load_iris()
X = data.data  # Features
y = data.target  # Target labels

# Normalize the features using StandardScaler (important for neural networks)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create the Feedforward Neural Network model
model = Sequential()

# Input layer (input shape is the number of features in X)
model.add(Dense(10, input_dim=X_train.shape[1], activation='relu'))  # First hidden layer with 10 neurons
model.add(Dense(10, activation='relu'))  # Second hidden layer with 10 neurons

# Output layer (number of output classes is 3 for the Iris dataset)
model.add(Dense(3, activation='softmax'))  # Softmax activation for multi-class classification

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=1)

# Make predictions on the test data
y_pred = np.argmax(model.predict(X_test), axis=1)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
