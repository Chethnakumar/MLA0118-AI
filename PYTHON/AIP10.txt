import heapq

def a_star(start, goal, graph, heuristic):
    open_list = [(0 + heuristic(start, goal), start)]
    g_values = {start: 0}
    came_from = {}

    while open_list:
        _, current_node = heapq.heappop(open_list)

        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return path[::-1], g_values[goal]

        for neighbor, cost in graph[current_node]:
            tentative_g = g_values[current_node] + cost
            if neighbor not in g_values or tentative_g < g_values[neighbor]:
                g_values[neighbor] = tentative_g
                heapq.heappush(open_list, (tentative_g + heuristic(neighbor, goal), neighbor))
                came_from[neighbor] = current_node

    return None, float('inf')

# Example heuristic function (Manhattan distance)
def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

# Example graph
graph = {
    (0, 0): [((0, 1), 1), ((1, 0), 1)],
    (0, 1): [((0, 0), 1), ((1, 1), 1)],
    (1, 0): [((0, 0), 1), ((1, 1), 1)],
    (1, 1): [((0, 1), 1), ((1, 0), 1)],
}

start, goal = (0, 0), (1, 1)
path, cost = a_star(start, goal, graph, heuristic)
print("Path:", path)
print("Cost:", cost)
