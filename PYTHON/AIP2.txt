def solve_n_queens(n):
    board = [-1] * n
    solutions = []
    place_queens(board, 0, solutions)
    return solutions

def place_queens(board, row, solutions):
    n = len(board)
    if row == n:
        solutions.append(board[:])
        return
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            place_queens(board, row + 1, solutions)
            board[row] = -1  # backtrack

def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def print_board(board):
    n = len(board)
    for row in board:
        line = ['.'] * n
        line[row] = 'Q'
        print(" ".join(line))
    print()

# Example usage to find and print one solution
solutions = solve_n_queens(8)
if solutions:
    print("One solution to the 8-Queens problem:")
    print_board(solutions[0])
else:
    print("No solution found.")
