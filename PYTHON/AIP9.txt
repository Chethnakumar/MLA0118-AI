import itertools

# Function to calculate the total distance of a path
def calculate_distance(path, dist_matrix):
    total_distance = 0
    for i in range(len(path) - 1):
        total_distance += dist_matrix[path[i]][path[i + 1]]
    total_distance += dist_matrix[path[-1]][path[0]]  # Return to start city
    return total_distance

# Function to solve the TSP using brute force
def tsp_bruteforce(dist_matrix):
    n = len(dist_matrix)
    cities = list(range(n))  # List of cities represented by their indices
    min_distance = float('inf')
    best_path = None
    
    # Try all possible permutations of cities
    for perm in itertools.permutations(cities):
        distance = calculate_distance(perm, dist_matrix)
        if distance < min_distance:
            min_distance = distance
            best_path = perm
    
    return min_distance, best_path

# Example distance matrix (symmetric)
dist_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

# Solve TSP using brute force
min_distance, best_path = tsp_bruteforce(dist_matrix)
print(f"Minimum Distance: {min_distance}")
print(f"Best Path: {best_path}")
